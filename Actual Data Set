{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"GpP5A82096ZV"},"outputs":[],"source":["clear all\n","close all\n","\n","% addpath()\n","\n","%Bayesian optimisation of a focal spot using SLM and Zernika polynomial\n","%corrections. This script first performs a 1D optimisation of the spherical term (focus), then\n","%performs a 2D optimisation of both astigmatisms (using optimal spherical\n","%term from previous step), then performs a 2D optimisation of both commas\n","%(using optimal spherical and astigs terms from previous step), and then\n","%finally performs a 5D optimisation of the 5 parameters on a small\n","%range around the previous optima.\n","\n","%% Set-up the camera - only once at the beginning of the script\n","% Load TLCamera DotNet assembly. The assembly .dll is assumed to be in the\n","% same folder as the scripts.\n","NET.addAssembly([pwd, '\\Thorlabs.TSI.TLCamera.dll']);\n","disp('Dot NET assembly loaded.');\n","\n","tlCameraSDK = Thorlabs.TSI.TLCamera.TLCameraSDK.OpenTLCameraSDK;\n","\n","% Get serial numbers of connected TLCameras.\n","serialNumbers = tlCameraSDK.DiscoverAvailableCameras;\n","disp([num2str(serialNumbers.Count), ' camera was discovered.']);\n","\n","if (serialNumbers.Count > 0)\n","\n","    % Open the first TLCamera using the serial number.\n","    disp('Opening the first camera')\n","    cam = tlCameraSDK.OpenCamera(serialNumbers.Item(0), false);\n","\n","     % Check if the camera supports setting \"Gain\"\n","    gainRange = cam.GainRange;\n","    if (gainRange.Maximum > 0)\n","        cam.Gain = 0;\n","    end\n","end\n","cam.OperationMode = Thorlabs.TSI.TLCameraInterfaces.OperationMode.SoftwareTriggered;\n","cam.IssueSoftwareTrigger;\n","cam.ExposureTime_us = 300;  %define a camera exposure (micro seconds), important not have saturation\n","maxPixelValue = double(2^cam.BitDepth - 3);\n","\n","\n","%% Perform the three first optimisation\n","% define optimisation vbles and limits for the first optimisations\n","Zern_amplitudes_1 = optimizableVariable(\"Zernikamplitudes_foc\",[-0.8,-0.4],\"Type\",\"real\");\n","Zern_amplitudes_2 = optimizableVariable(\"Zernikamplitudes_astig1\",[0.1,0.3],\"Type\",\"real\");\n","Zern_amplitudes_3 = optimizableVariable(\"Zernikamplitudes_astig2\",[-0.05,0.2],\"Type\",\"real\");\n","Zern_amplitudes_4 = optimizableVariable(\"Zernikamplitudes_comma1\",[-0.02,0.0],\"Type\",\"real\");\n","Zern_amplitudes_5 = optimizableVariable(\"Zernikamplitudes_comma2\",[-0.02,0.0],\"Type\",\"real\");\n","\n","% optimise spherical term (focus) - 1D\n","foc_max_count_h = @(x)foc_peak_intensity(x,cam);\n","results = bayesopt(foc_max_count_h,Zern_amplitudes_1,'MaxObjectiveEvaluations',30);\n","opt_foc = results.XAtMinObjective.Zernikamplitudes_foc;\n","\n","% optimise astigs - 2D\n","astig_max_count_h = @(x)astig_peak_intensity(x,cam,opt_foc);\n","results1 = bayesopt(astig_max_count_h,[Zern_amplitudes_2,Zern_amplitudes_3],'MaxObjectiveEvaluations',30);\n","opt_astig1 = results1.XAtMinObjective.Zernikamplitudes_astig1;\n","opt_astig2 = results1.XAtMinObjective.Zernikamplitudes_astig2;\n","\n","% optimise commas - 2D\n","comma_max_count_h = @(x)comma_peak_intensity(x,cam,opt_foc,opt_astig1,opt_astig2);\n","results2 = bayesopt(comma_max_count_h,[Zern_amplitudes_4,Zern_amplitudes_5],'MaxObjectiveEvaluations',30);\n","opt_comma1 = results2.XAtMinObjective.Zernikamplitudes_comma1;\n","opt_comma2 = results2.XAtMinObjective.Zernikamplitudes_comma2;\n","\n","%% 5D Optimisation around the optimal values as returned by the previous optimisations\n","% re-define limits of optimisation vbles\n","Zern_amp_opt_1 = optimizableVariable(\"OPTamplitudes_foc\",[opt_foc-(abs(opt_foc)*0.1),opt_foc+(abs(opt_foc)*0.1)],\"Type\",\"real\");\n","Zern_amp_opt_2 = optimizableVariable(\"OPTamplitudes_astig1\",[opt_astig1-(abs(opt_astig1)*0.1),opt_astig1+(abs(opt_astig1)*0.1)],\"Type\",\"real\");\n","Zern_amp_opt_3 = optimizableVariable(\"OPTamplitudes_astig2\",[opt_astig2-(abs(opt_astig2)*0.1),opt_astig2+(abs(opt_astig2)*0.1)],\"Type\",\"real\");\n","Zern_amp_opt_4 = optimizableVariable(\"OPTamplitudes_comma1\",[opt_comma1-(abs(opt_comma1)*0.1),opt_comma1+(abs(opt_comma1)*0.1)],\"Type\",\"real\");\n","Zern_amp_opt_5 = optimizableVariable(\"OPTamplitudes_comma2\",[opt_comma2-(abs(opt_comma2)*0.1),opt_comma2+(abs(opt_comma2)*0.1)],\"Type\",\"real\");\n","\n","% do 5D optimisation\n","final_max_count_h = @(x)final_peak_intensity(x,cam);\n","final_results = bayesopt(final_max_count_h,[Zern_amp_opt_1,Zern_amp_opt_2,Zern_amp_opt_3,Zern_amp_opt_4,Zern_amp_opt_5],'MaxObjectiveEvaluations',30);\n","\n","%% Close camera\n","disp('Releasing the camera');\n","cam.Dispose;\n","delete(cam);\n","% Release the serial numbers\n","delete(serialNumbers);\n","% Release the TLCameraSDK.\n","tlCameraSDK.Dispose;\n","delete(tlCameraSDK);\n","\n","\n","%% Objective function for focus\n","function foc_max_count = foc_peak_intensity(xx,cam)%TAKE PICTURE\n","    %% SLM and laser parameters\n","    H=1280; V=1024; %%Number of Horizontal and Vertical pixels\n","    PixelSize = 12.5e-3; % [mm] pixel\n","    x = PixelSize.*(-H/2:(H/2-1)); %[mm] x width of window\n","    y = PixelSize.*(-V/2:(V/2-1)); %[mm] y width of window\n","    [X,Y] = meshgrid(x,y);\n","    [PHI,RHO] = cart2pol(X,Y);\n","\n","    Holo = zeros(V,H); Holo_Blank = zeros(V,H);\n","    lambda=660e-6;\n","    %% Hologram part\n","    ff =- 5000;  %mm\n","    k = 2*pi/lambda;\n","    T = k/ff*(X.^2+Y.^2);\n","    lens = T;\n","    %zernike corrections\n","    pist = 0; x_tilt = 0; y_tilt = 0; v_astig=0.25 ; o_astig=0.05  ; h_comma = 0.0; v_comma = 0.0; spher = 0;\n","\n","    HoloL = lens + zernike(pist, x_tilt , y_tilt , xx.Zernikamplitudes_foc , v_astig,  o_astig , h_comma ,v_comma , spher, H,V,RHO,PHI);\n","\n","    %Calibration\n","    poly_file = fopen('polyfit_par_diode.txt','r');\n","    formatSpec = '%f';\n","    header = fgetl(poly_file);\n","    polyvalues_cali = str2num(fgetl(poly_file));\n","    fclose(poly_file);\n","    GREYVAL = polyval(polyvalues_cali, mod(HoloL,2*pi));\n","\n","    % Grascale normalization from [0, 2Pi]to [0 255]\n","    GREYVAL = GREYVAL./255; %Normalise holograms\n","    HoloSLM = [GREYVAL];\n","    % display onto SLM\n","    device_number=2;\n","    fullscreen(HoloSLM, device_number)\n","    pause(1) % THIS IS TO GIVE TIME TO THE SLM TO UPDATE\n","    %% CAMERA part\n","\n","    % Set the FIFO frame buffer size. Default size is 1.\n","    cam.MaximumNumberOfFramesToQueue = 1;\n","\n","    % Start software triggered image acquisition\n","    % disp('Starting software triggered image acquisition.');\n","\n","    % Set the number of frames per software trigger and start trigger\n","    % acquisition\n","    cam.FramesPerTrigger_zeroForUnlimited = 1;\n","    cam.Arm;\n","\n","    %get frame\n","    cam.IssueSoftwareTrigger;\n","    % Wait for image buffer to be filled to prevent sending too many\n","    % software triggers.\n","    while (cam.NumberOfQueuedFrames == 0)\n","        pause(0.01);\n","    end\n","    imageFrame = cam.GetPendingFrameOrNull;\n","    if ~isempty(imageFrame)\n","        imageData = uint16(imageFrame.ImageData.ImageData_monoOrBGR);\n","        imageHeight = imageFrame.ImageData.Height_pixels;\n","        imageWidth = imageFrame.ImageData.Width_pixels;\n","        imageData2D = reshape(uint16(imageData), [imageWidth, imageHeight]);\n","        imageData2D(858:876, 398:429) = zeros(19,32);\n","        if 1\n","            fig3 = figure(3);\n","            fig3; imagesc(imageData2D'), colormap(gray), colorbar\n","        end\n","        % disp(\"ok\")\n","    end\n","\n","    %find correct value for exposure\n","    exposure = cam.ExposureTime_us;\n","    max_imageData2D = max(max(imageData2D,[],\"all\"));\n","    maxPixelValue = double(2^cam.BitDepth - 3);\n","    if (max_imageData2D >= maxPixelValue)\n","        % Release the camera\n","        error(\"Camera saturated\")\n","    end\n","    foc_max_count = maxPixelValue-max_imageData2D;\n","    % Stop software triggered image acquisition\n","    % disp('Stopping software triggered image acquisition.');\n","    cam.Disarm;\n","\n","\n","end %if\n","\n","%% Objective function for astigmatism\n","function astig_max_count = astig_peak_intensity(xx,cam,opt_foc)%TAKE PICTURE\n","    %% SLM and laser parameters\n","    H=1280; V=1024; %%Number of Horizontal and Vertical pixels\n","    PixelSize = 12.5e-3; % [mm] pixel\n","    x = PixelSize.*(-H/2:(H/2-1)); %[mm] x width of window\n","    y = PixelSize.*(-V/2:(V/2-1)); %[mm] y width of window\n","    [X,Y] = meshgrid(x,y);\n","    [PHI,RHO] = cart2pol(X,Y);\n","\n","    Holo = zeros(V,H); Holo_Blank = zeros(V,H);\n","    lambda=660e-6;\n","    %% Hologram part\n","    ff =- 5000;  %mm\n","    k = 2*pi/lambda;\n","    T = k/ff*(X.^2+Y.^2);\n","    lens = T;\n","    %zernike corrections\n","    pist = 0; x_tilt = 0; y_tilt = 0; foc = opt_foc; h_comma = 0.0; v_comma = 0.0; spher = 0;\n","\n","    HoloL = lens + zernike(pist, x_tilt , y_tilt , foc , xx.Zernikamplitudes_astig1,  xx.Zernikamplitudes_astig2 ,h_comma , v_comma , spher, H,V,RHO,PHI);\n","\n","    %Calibration\n","    poly_file = fopen('polyfit_par_diode.txt','r');\n","    formatSpec = '%f';\n","    header = fgetl(poly_file);\n","    polyvalues_cali = str2num(fgetl(poly_file));\n","    fclose(poly_file);\n","    GREYVAL = polyval(polyvalues_cali, mod(HoloL,2*pi));\n","\n","    % Grascale normalization from [0, 2Pi]to [0 255]\n","    GREYVAL = GREYVAL./255; %Normalise holograms\n","    HoloSLM = [GREYVAL];\n","    % display onto SLM\n","    device_number=2;\n","    fullscreen(HoloSLM, device_number)\n","    pause(1)\n","    %% CAMERA part\n","\n","    % Set the FIFO frame buffer size. Default size is 1.\n","    cam.MaximumNumberOfFramesToQueue = 1;\n","\n","    % Start software triggered image acquisition\n","    % disp('Starting software triggered image acquisition.');\n","\n","    % Set the number of frames per software trigger and start trigger\n","    % acquisition\n","    cam.FramesPerTrigger_zeroForUnlimited = 1;\n","    cam.Arm;\n","\n","    %get frame\n","    cam.IssueSoftwareTrigger;\n","    % Wait for image buffer to be filled to prevent sending too many\n","    % software triggers.\n","    while (cam.NumberOfQueuedFrames == 0)\n","        pause(0.01);\n","    end\n","    imageFrame = cam.GetPendingFrameOrNull;\n","    if ~isempty(imageFrame)\n","        imageData = uint16(imageFrame.ImageData.ImageData_monoOrBGR);\n","        imageHeight = imageFrame.ImageData.Height_pixels;\n","        imageWidth = imageFrame.ImageData.Width_pixels;\n","        imageData2D = reshape(uint16(imageData), [imageWidth, imageHeight]);\n","        imageData2D(858:876, 398:429) = zeros(19,32);\n","        if 1\n","            fig3 = figure(3);\n","            fig3; imagesc(imageData2D'), colormap(gray), colorbar\n","        end\n","        % disp(\"ok\")\n","    end\n","\n","    %find correct value for exposure\n","    exposure = cam.ExposureTime_us;\n","    max_imageData2D = max(max(imageData2D,[],\"all\"));\n","    maxPixelValue = double(2^cam.BitDepth - 3);\n","    if (max_imageData2D >= maxPixelValue)\n","        error(\"Camera saturated\")\n","    end\n","    astig_max_count = maxPixelValue-max_imageData2D;\n","    % Stop software triggered image acquisition\n","    % disp('Stopping software triggered image acquisition.');\n","    cam.Disarm;\n","\n","\n","end\n","\n","%% Objective function for comma\n","function comma_max_count = comma_peak_intensity(xx,cam,opt_foc,opt_astig1,opt_astig2)%TAKE PICTURE\n","    %% SLM and laser parameters\n","    H=1280; V=1024; %%Number of Horizontal and Vertical pixels\n","    PixelSize = 12.5e-3; % [mm] pixel\n","    x = PixelSize.*(-H/2:(H/2-1)); %[mm] x width of window\n","    y = PixelSize.*(-V/2:(V/2-1)); %[mm] y width of window\n","    [X,Y] = meshgrid(x,y);\n","    [PHI,RHO] = cart2pol(X,Y);\n","\n","    Holo = zeros(V,H); Holo_Blank = zeros(V,H);\n","    lambda=660e-6;\n","    %% Hologram part\n","    ff =- 5000;  %mm\n","    k = 2*pi/lambda;\n","    T = k/ff*(X.^2+Y.^2);\n","    lens = T;\n","    %zernike corrections\n","    pist = 0; x_tilt = 0; y_tilt = 0; foc = opt_foc; v_astig = opt_astig1; o_astig = opt_astig2; h_comma = 0.0; v_comma = 0.0; spher = 0;\n","\n","    HoloL = lens + zernike(pist, x_tilt , y_tilt , foc , v_astig,  o_astig , xx.Zernikamplitudes_comma1 , xx.Zernikamplitudes_comma2 , spher, H,V,RHO,PHI);\n","\n","    %Calibration\n","    poly_file = fopen('polyfit_par_diode.txt','r');\n","    formatSpec = '%f';\n","    header = fgetl(poly_file);\n","    polyvalues_cali = str2num(fgetl(poly_file));\n","    fclose(poly_file);\n","    GREYVAL = polyval(polyvalues_cali, mod(HoloL,2*pi));\n","\n","    % Grascale normalization from [0, 2Pi]to [0 255]\n","    GREYVAL = GREYVAL./255; %Normalise holograms\n","    HoloSLM = [GREYVAL];\n","    % display onto SLM\n","    device_number=2;\n","    fullscreen(HoloSLM, device_number)\n","    pause(1)\n","    %% CAMERA part\n","\n","        % Set the FIFO frame buffer size. Default size is 1.\n","        cam.MaximumNumberOfFramesToQueue = 1;\n","\n","        % Start software triggered image acquisition\n","        % disp('Starting software triggered image acquisition.');\n","\n","        % Set the number of frames per software trigger and start trigger\n","        % acquisition\n","        cam.FramesPerTrigger_zeroForUnlimited = 1;\n","        cam.Arm;\n","\n","        %get frame\n","        cam.IssueSoftwareTrigger;\n","        % Wait for image buffer to be filled to prevent sending too many\n","        % software triggers.\n","        while (cam.NumberOfQueuedFrames == 0)\n","            pause(0.01);\n","        end\n","        imageFrame = cam.GetPendingFrameOrNull;\n","        if ~isempty(imageFrame)\n","            imageData = uint16(imageFrame.ImageData.ImageData_monoOrBGR);\n","            imageHeight = imageFrame.ImageData.Height_pixels;\n","            imageWidth = imageFrame.ImageData.Width_pixels;\n","            imageData2D = reshape(uint16(imageData), [imageWidth, imageHeight]);\n","            imageData2D(858:876, 398:429) = zeros(19,32);\n","            if 1\n","                fig3 = figure(3);\n","                fig3; imagesc(imageData2D'), colormap(gray), colorbar\n","            end\n","            % disp(\"ok\")\n","        end\n","\n","        %find correct value for exposure\n","        exposure = cam.ExposureTime_us;\n","        max_imageData2D = max(max(imageData2D,[],\"all\"));\n","        maxPixelValue = double(2^cam.BitDepth - 3);\n","        if (max_imageData2D >= maxPixelValue)\n","            % Release the camera\n","            error(\"Camera saturated\")\n","        end\n","        comma_max_count = maxPixelValue-max_imageData2D;\n","        % Stop software triggered image acquisition\n","        % disp('Stopping software triggered image acquisition.');\n","        cam.Disarm;\n","\n","\n","    end %if\n","\n","\n","%% Objective function for 5d\n","function final_max_count = final_peak_intensity(xx,cam)%TAKE PICTURE\n","    %% SLM and laser parameters\n","    H=1280; V=1024; %%Number of Horizontal and Vertical pixels\n","    PixelSize = 12.5e-3; % [mm] pixel\n","    x = PixelSize.*(-H/2:(H/2-1)); %[mm] x width of window\n","    y = PixelSize.*(-V/2:(V/2-1)); %[mm] y width of window\n","    [X,Y] = meshgrid(x,y);\n","    [PHI,RHO] = cart2pol(X,Y);\n","\n","    Holo = zeros(V,H); Holo_Blank = zeros(V,H);\n","    lambda=660e-6;\n","    %% Hologram part\n","    ff =- 5000;  %mm\n","    k = 2*pi/lambda;\n","    T = k/ff*(X.^2+Y.^2);\n","    lens = T;\n","    %zernike corrections\n","    pist = 0; x_tilt = 0; y_tilt = 0; spher = 0;\n","\n","    HoloL = lens + zernike(pist, x_tilt , y_tilt , xx.OPTamplitudes_foc , xx.OPTamplitudes_astig1,  xx.OPTamplitudes_astig2 , xx.OPTamplitudes_comma1 , xx.OPTamplitudes_comma2 , spher, H,V,RHO,PHI);\n","\n","    %Calibration\n","    poly_file = fopen('polyfit_par_diode.txt','r');\n","    formatSpec = '%f';\n","    header = fgetl(poly_file);\n","    polyvalues_cali = str2num(fgetl(poly_file));\n","    fclose(poly_file);\n","    GREYVAL = polyval(polyvalues_cali, mod(HoloL,2*pi));\n","\n","    % Grascale normalization from [0, 2Pi]to [0 255]\n","    GREYVAL = GREYVAL./255; %Normalise holograms\n","    HoloSLM = [GREYVAL];\n","    % display onto SLM\n","    device_number=2;\n","    fullscreen(HoloSLM, device_number)\n","    pause(1)\n","    %% CAMERA part\n","\n","        % Set the FIFO frame buffer size. Default size is 1.\n","        cam.MaximumNumberOfFramesToQueue = 1;\n","\n","        % Start software triggered image acquisition\n","        % disp('Starting software triggered image acquisition.');\n","\n","        % Set the number of frames per software trigger and start trigger\n","        % acquisition\n","        cam.FramesPerTrigger_zeroForUnlimited = 1;\n","        cam.Arm;\n","\n","        %get frame\n","        cam.IssueSoftwareTrigger;\n","        % Wait for image buffer to be filled to prevent sending too many\n","        % software triggers.\n","        while (cam.NumberOfQueuedFrames == 0)\n","            pause(0.01);\n","        end\n","        imageFrame = cam.GetPendingFrameOrNull;\n","        if ~isempty(imageFrame)\n","            imageData = uint16(imageFrame.ImageData.ImageData_monoOrBGR);\n","            imageHeight = imageFrame.ImageData.Height_pixels;\n","            imageWidth = imageFrame.ImageData.Width_pixels;\n","            imageData2D = reshape(uint16(imageData), [imageWidth, imageHeight]);\n","            imageData2D(858:876, 398:429) = zeros(19,32);\n","            if 1\n","                fig3 = figure(3);\n","                fig3; imagesc(imageData2D'), colormap(gray), colorbar\n","            end\n","            % disp(\"ok\")\n","        end\n","\n","        %find correct value for exposure\n","        exposure = cam.ExposureTime_us;\n","        max_imageData2D = max(max(imageData2D,[],\"all\"));\n","        maxPixelValue = double(2^cam.BitDepth - 3);\n","        if (max_imageData2D >= maxPixelValue)\n","            error(\"Camera saturated\")\n","        end\n","        final_max_count = maxPixelValue-max_imageData2D;\n","        % Stop software triggered image acquisition\n","        % disp('Stopping software triggered image acquisition.');\n","        cam.Disarm;\n","\n","\n","    end %if\n","%%\n","\n","%% Zernike corrections function definition\n","function  Holo_correc  = zernike( pist, x_tilt , y_tilt ,  dfoc ,ver_ast, ob_ast, h_coma , v_coma , spher, H,V, RHO,PHI)\n","\n","    Holo_0 = (zeros(V,H)+1)*pist;\n","    Holo_1 = x_tilt * (RHO.*cos(mod(PHI,2*pi))) ;\n","    Holo_2 = y_tilt* (RHO.*sin(mod(PHI,2*pi)) );\n","    Holo_3 = dfoc * ((2* ( RHO.* RHO) -1)) ;\n","    Holo_4 = ver_ast * (RHO.* RHO.*cos(2 * mod(PHI,2*pi)));\n","    Holo_5 = ob_ast * (( RHO.* RHO).*sin(2 * mod(PHI,2*pi)));\n","    Holo_6 = h_coma * ((3*( RHO.* RHO)-2) .* RHO .* cos(mod(PHI,2*pi)));\n","    Holo_7 = v_coma * ((3*( RHO.* RHO)-2) .* RHO .* sin(mod(PHI,2*pi)));\n","    Holo_8 = spher * (6*(RHO.*RHO.*RHO.*RHO) - 6*(RHO.*RHO) + 1);\n","\n","    Holo_correc =  Holo_0 + Holo_1 + Holo_2+ Holo_3+ Holo_4+ Holo_5+ Holo_6+ Holo_7+ Holo_8;\n","end\n","\n","\n"]}]}